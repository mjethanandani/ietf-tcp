<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-scharf-tcpm-yang-tcp-05" ipr="trust200902">
  <front>
    <title abbrev="TCP Configuration">YANG Model for Transmission Control
    Protocol (TCP) Configuration</title>

    <author fullname="Michael Scharf" initials="M." surname="Scharf">
      <organization abbrev="Hochschule Esslingen">Hochschule Esslingen -
      University of Applied Sciences</organization>

      <address>
        <postal>
          <street>Flandernstr. 101</street>

          <code>73732</code>

          <city>Esslingen</city>

          <region/>

          <country>Germany</country>
        </postal>

        <!--<phone></phone>-->

        <email>michael.scharf@hs-esslingen.de</email>
      </address>
    </author>

    <author fullname="Vishal Murgai" initials="V." surname="Murgai">
      <organization/>

      <address>
        <email>vmurgai@gmail.com</email>
      </address>
    </author>

    <author fullname="Mahesh Jethanandani" initials="M."
            surname="Jethanandani">
      <organization>Kloud Services</organization>

      <address>
        <email>mjethanandani@gmail.com</email>
      </address>
    </author>

    <date day="7" month="July" year="2020"/>

    <area>Transport</area>

    <workgroup>TCPM</workgroup>

    <keyword>YANG</keyword>

    <abstract>
      <t>This document specifies a YANG model for TCP on devices that are
      configured by network management protocols. The YANG model defines a
      container for all TCP connections and groupings of some of the
      parameters that can be imported and used in TCP implementations or by
      other models that need to configure TCP parameters. The model includes
      definitions from YANG Groupings for TCP Client and TCP Servers
      (I-D.ietf-netconf-tcp-client-server). The model is NMDA (RFC 8342)
      compliant.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The <xref target="RFC0793">Transmission Control Protocol (TCP)
      </xref> is used by many applications in the Internet, including control
      and management protocols. Therefore, TCP is implemented on network
      elements that can be configured via network management protocols such as
      <xref target="RFC6241">NETCONF</xref> or <xref
      target="RFC8040">RESTCONF</xref>. This document specifies a <xref
      target="RFC7950">YANG</xref> 1.1 model for configuring TCP on network
      elements that support YANG data models, and is <xref
      target="RFC8342">Network Management Datastore Architecture (NMDA)</xref>
      compliant. This module defines a container for TCP connection, and
      includes definitions from <xref
      target="I-D.ietf-netconf-tcp-client-server">YANG Groupings for TCP
      Clients and TCP Servers</xref>. The model focuses on fundamental and
      standard TCP functions that are widely implemented. The model can be
      augmented or updated to address more advanced or implementation-specific
      TCP features in the future.</t>

      <t>Many protocol stacks on Internet hosts use other methods to configure
      TCP, such as operating system configuration or policies. Many TCP/IP
      stacks cannot be configured by network management protocols such as
      <xref target="RFC6241">NETCONF</xref> or <xref
      target="RFC8040">RESTCONF</xref>. Moreover, many existing TCP/IP stacks
      do not use YANG data models. Such TCP implementations often have other
      means to configure the parameters listed in this document, which are
      outside the scope of this document.</t>

      <t>This specification is orthogonal to <xref target="RFC4022">Management
      Information Base (MIB) for the Transmission Control Protocol
      (TCP)</xref>. The <xref target="RFC4898">TCP Extended Statistics
      MIB</xref> is also available. It is possible to translate a MIB into a
      YANG model, for instance using <xref target="RFC6643">Translation of
      Structure of Management Information Version 2 (SMIv2) MIB Modules to
      YANG Modules</xref>. However, this approach is not used in this
      document, as such a translated model would not be up-to-date.</t>
    </section>

    <section title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in BCP 14
      <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when,
      they appear in all capitals, as shown here.</t>

      <section title="Note to  RFC Editor">
        <t>This document uses several placeholder values throughout the
        document. Please replace them as follows and remove this note before
        publication.</t>

        <t>RFC XXXX, where XXXX is the number assigned to this document at the
        time of publication.</t>

        <t>YYYY-MM-DD with the actual date of the publication of this
        document.</t>
      </section>
    </section>

    <section title="Model Overview">
      <section title="Modeling Scope">
        <t>TCP is implemented on many different system architectures. As a
        result, there are may different and often implementation-specific ways
        to configure parameters of the TCP protocol engine. In addition, in
        many TCP/IP stacks configuration exists for different scopes:</t>

        <t><list style="symbols">
            <t>Global configuration: Many TCP implementations have
            configuration parameters that affect all TCP connections. Typical
            examples include enabling or disabling optional protocol
            features.</t>

            <t>Interface configuration: It can be useful to use different TCP
            parameters on different interfaces, e.g., different device ports
            or IP interfaces. In that case, TCP parameters can be part of the
            interface configuration. Typical examples are the Maximum Segment
            Size (MSS) or configuration related to hardware offloading.</t>

            <t>Connection parameters: Many implementations have means to
            influence the behavior of each TCP connection, e.g., on the
            programming interface used by applications. A typical example are
            socket options in the socket API, such as disabling the Nagle
            algorithm by TCP_NODELAY. If an application uses such an
            interface, it is possible that the configuration of the
            application or application protocol includes TCP-related
            parameters. An example is the <xref
            target="I-D.ietf-idr-bgp-model">BGP YANG Model for Service
            Provider Networks </xref>.</t>

            <t>Policies: Setting of TCP parameters can also be part of system
            policies, templates, or profiles. An example would be the
            preferences defined in the TAPS interface <xref
            target="I-D.ietf-taps-interface">An Abstract Application Layer
            Interface to Transport Services</xref>.</t>
          </list></t>

        <t>As a result, there is no ground truth for setting certain TCP
        parameters, and traditionally different TCP implementation have used
        different modeling approaches. For instance, one implementation may
        define a given configuration parameter globally, while another one
        uses per-interface settings, and both approaches work well for the
        corresponding use cases. Also, different systems may use different
        default values.</t>

        <t>In addition, TCP can be implemented in different ways and design
        choices by the protocol engine often affect configuration options. In
        a number of areas there are known differences between different TCP
        stack architectures. This includes amongst others:</t>

        <t><list style="symbols">
            <t>Window size: TCP stacks can either store window state variables
            (such as the congestion window) in segments or in bytes.</t>

            <t>Buffer sizes: The memory management depends on the operating
            system. As the size of buffers can vary over several orders of
            magnitude, very different implementations exist. This typically
            influences TCP flow control.</t>

            <t>Timers: Timer implementation is another area in which TCP
            stacks may differ.</t>
          </list></t>

        <t>Nonetheless, there are a number of basic system parameters that are
        configurable on many TCP implementations, even if not all TCP
        implementations may indeed have all these settings, and even if there
        are differences regarding syntax and semantics. This document focuses
        on modeling such basic parameters directly following from
        standards.</t>

        <t>In addition to configuration of the TCP protocol engine, a TCP
        implementation typically also offers access to operational state and
        statistics. This includes amongst others:</t>

        <t><list style="symbols">
            <t>Statistics: Counters for the number of active/passive opens,
            sent and received segments, errors, and possibly other detailed
            debugging information</t>

            <t>TCP connection table: Access to status information for all TCP
            connections</t>

            <t>TCP listener table: Information about all TCP listening
            endpoints</t>
          </list></t>
      </section>

      <section title="Model Design">
        <t>This document models fundamental system parameters that are
        configurable on many TCP implementations, and for which the
        configuration is reasonably similar. Similar to the <xref
        target="RFC4022">TCP MIB</xref>, this document also specifies a TCP
        connection table. This enables both global and connection-specific TCP
        configuration.</t>

        <t>An important use case is the TCP configuration on network elements
        such as routers, which often use YANG data models. The model therefore
        specifies TCP parameters that are important on such TCP stacks. A
        typical example is the support of <xref
        target="RFC5925">TCP-AO</xref>. TCP-AO is increasingly supported on
        routers and it requires configuration.</t>

        <t>The YANG model defined in this document includes definitions from
        the <xref target="I-D.ietf-netconf-tcp-client-server">YANG Groupings
        for TCP Clients and TCP Servers</xref>. Similar to that model, this
        specification defines YANG groupings. This allows reuse of these
        groupings in different YANG data models. It is intended that these
        groupings will be used either standalone or for TCP-based protocols as
        part of a stack of protocol-specific configuration models. An example
        could be the <xref target="I-D.ietf-idr-bgp-model">BGP YANG Model for
        Service Provider Networks </xref>.</t>

        <t>There are also other existing TCP-related YANG models, which are
        othogonal to this specification. Examples are:</t>

        <t><list style="symbols">
            <t>TCP header attributes are modeled in other models, such as
            <xref target="RFC8519">YANG Data Model for Network Access Control
            Lists (ACLs) </xref> and <xref
            target="I-D.ietf-dots-data-channel">Distributed Denial-of-Service
            Open Thread Signaling (DOTS) Data Channel
            Specification</xref>.</t>

            <t>TCP-related configuration of a NAT (e.g., NAT44, NAT64,
            Destination NAT, ...) is defined in <xref target="RFC8512">A YANG
            Module for Network Address Translation (NAT) and Network Prefix
            Translation (NPT) </xref> and <xref target="RFC8513">A YANG Data
            Model for Dual-Stack Lite (DS-Lite) </xref>.</t>
          </list></t>
      </section>

      <section title="Tree Diagram">
        <t>This section provides a abridged tree diagram for the YANG module
        defined in this document. Annotations used in the diagram are defined
        in <xref target="RFC8340">YANG Tree Diagrams </xref>.</t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/ietf-tcp@YYYY-MM-DD-abridged-tree.txt)
]]></artwork>
        </figure>
      </section>
    </section>

    <section title="TCP YANG Model">
      <t><figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-tcp@YYYY-MM-DD.yang"

INSERT_TEXT_FROM_FILE(../src/yang/ietf-tcp@YYYY-MM-DD.yang)

<CODE ENDS>]]></artwork>
        </figure></t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <section title="The IETF XML Registry">
        <t>This document registers two URIs in the "ns" subregistry of the
        <xref target="RFC3688">IETF XML Registry </xref>. Following the format
        in <xref target="RFC3688">IETF XML Registry </xref>, the following
        registrations are requested:</t>

        <t><figure>
            <artwork><![CDATA[
   URI: urn:ietf:params:xml:ns:yang:ietf-tcp
   Registrant Contact: The TCPM WG of the IETF.
   XML: N/A, the requested URI is an XML namespace.
]]></artwork>
          </figure></t>
      </section>

      <section title="The YANG Module Names Registry">
        <t>This document registers a YANG modules in the YANG Module Names
        registry <xref target="RFC6020">YANG - A Data Modeling Language
        </xref>. Following the format in <xref target="RFC6020">YANG - A Data
        Modeling Language </xref>, the following registrations are
        requested:</t>

        <t><figure>
            <artwork><![CDATA[
   name:         ietf-tcp
   namespace:    urn:ietf:params:xml:ns:yang:ietf-tcp
   prefix:       tcp
   reference:    RFC XXXX
]]></artwork>
          </figure></t>
      </section>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>The YANG module specified in this document defines a schema for data
      that is designed to be accessed via network management protocols such as
      <xref target="RFC6241">NETCONF</xref> or <xref target="RFC8040">RESTCONF
      </xref>. The lowest NETCONF layer is the secure transport layer, and the
      mandatory-to-implement secure transport is Secure Shell (SSH) described
      in <xref target="RFC6242">Using the NETCONF protocol over SSH </xref>.
      The lowest RESTCONF layer is HTTPS, and the mandatory-to-implement
      secure transport is <xref target="RFC8446">TLS </xref>.</t>

      <t>The <xref target="RFC8341">Network Configuration Access Control Model
      (NACM) </xref> provides the means to restrict access for particular
      NETCONF or RESTCONF users to a preconfigured subset of all available
      NETCONF or RESTCONF protocol operations and content.</t>

      <!--
    - if you have any writeable data nodes (those are all the - "config true" nodes, and remember, that is the default) - describe their specific sensitivity or vulnerability. 

    There are a number of data nodes defined in this YANG module that are writable/creatable/deletable (i.e., config true, which is the default). These data nodes may be considered sensitive or vulnerable in some network environments. Write operations (e.g., edit-config) to these data nodes without proper protection can have a negative effect on network operations. These are the subtrees and data nodes and their sensitivity/vulnerability: 

    <list subtrees and data nodes and state why they are sensitive> 

    - for all YANG modules you must evaluate whether any readable data - nodes (those are all the "config false" nodes, but also all other - nodes, because they can also be read via operations like get or - get-config) are sensitive or vulnerable (for instance, if they - might reveal customer information or violate personal privacy - laws such as those of the European Union if exposed to - unauthorized parties) 

    Some of the readable data nodes in this YANG module may be considered sensitive or vulnerable in some network environments. It is thus important to control read access (e.g., via get, get-config, or notification) to these data nodes. These are the subtrees and data nodes and their sensitivity/vulnerability: 

    <list subtrees and data nodes and state why they are sensitive> 

    - if your YANG module has defined any rpc operations - describe their specific sensitivity or vulnerability. 

    Some of the RPC operations in this YANG module may be considered sensitive or vulnerable in some network environments. It is thus important to control access to these operations. These are the operations and their sensitivity/vulnerability: 

    <list RPC operations and state why they are sensitive> 
    -->
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.0793'?>

      <?rfc include='reference.RFC.2119'?>

      <?rfc include='reference.RFC.3688'?>

      <?rfc include='reference.RFC.6020'?>

      <?rfc include='reference.RFC.6241'?>

      <?rfc include='reference.RFC.6242'?>

      <?rfc include='reference.RFC.7950'?>

      <?rfc include='reference.RFC.8040'?>

      <?rfc include='reference.RFC.8174'?>

      <?rfc include='reference.RFC.8340'?>

      <?rfc include='reference.RFC.8341'?>

      <?rfc include='reference.RFC.8342'?>

      <?rfc include='reference.RFC.8446'?>

      <?rfc include='reference.I-D.ietf-netconf-tcp-client-server'?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.4022'?>

      <?rfc include='reference.RFC.4898'?>

      <?rfc include='reference.RFC.5925'?>

      <?rfc include='reference.RFC.6643'?>

      <?rfc include='reference.RFC.8512'?>

      <?rfc include='reference.RFC.8513'?>

      <?rfc include='reference.RFC.8519'?>

      <?rfc include='reference.I-D.ietf-dots-data-channel'?>

      <?rfc include='reference.I-D.ietf-idr-bgp-model'?>

      <?rfc include='reference.I-D.ietf-taps-interface'?>
    </references>

    <section anchor="app_ack" title="Acknowledgements">
      <t>Michael Scharf was supported by the StandICT.eu project, which is
      funded by the European Commission under the Horizon 2020 Programme.</t>

      <t>The following persons have contributed to this document by reviews:
      Mohamed Boucadair</t>
    </section>

    <section anchor="app_changes"
             title="Changes compared to previous versions">
      <t>Changes compared to draft-scharf-tcpm-yang-tcp-04</t>

      <t><list style="symbols">
          <t>Removed congestion control</t>

          <t>Removed global stack parameters</t>
        </list>Changes compared to draft-scharf-tcpm-yang-tcp-03</t>

      <t><list style="symbols">
          <t>Updated TCP-AO grouping</t>

          <t>Added congestion control</t>
        </list></t>

      <t>Changes compared to draft-scharf-tcpm-yang-tcp-02</t>

      <t><list style="symbols">
          <t>Initial proposal of a YANG model including base configuration
          parameters, TCP-AO configuration, and a connection list</t>

          <t>Editorial bugfixes and outdated references reported by Mohamed
          Boucadair</t>

          <t>Additional co-author Mahesh Jethanandani</t>
        </list></t>

      <t>Changes compared to draft-scharf-tcpm-yang-tcp-01</t>

      <t><list style="symbols">
          <t>Alignment with <xref
          target="I-D.ietf-netconf-tcp-client-server"/></t>

          <t>Removing backward-compatibility to the TCP MIB</t>

          <t>Additional co-author Vishal Murgai</t>
        </list></t>

      <t>Changes compared to draft-scharf-tcpm-yang-tcp-00</t>

      <t><list style="symbols">
          <t>Editorial improvements</t>
        </list></t>
    </section>

    <section title="Examples">
      <section title="Keepalive Configuration">
        <t>This particular example demonstrates how both a particular
        connection can be configured for keepalives.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-tcp-configuration-a.1.1.xml)
]]></artwork>
          </figure></t>
      </section>
    </section>
  </back>
</rfc>
